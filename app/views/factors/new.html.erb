<div class="wrapper"></div>


<div id="container">

<label for="title">タイトル</label><br>
<input type="text" id="title" name="title"required><br>
<label for="depatureTime">出発時間</label><br>
<input type="time" id="depatureTime" name="depatureTime"required><br>
<label for="depatureAddress">出発住所</label><br>
<input type="text" id="depatureAddress" placeholder="小牧市●町■町目" style="width: 250px"><br>
<label for="todo">やりたいことカテゴリー</label><br>
<input type="text" id="todo" placeholder="映画館" style="width: 250px"><br>
<label for="resutaurantCategory">食べたいものカテゴリー</label><br>
<input type="text" id="resutaurantCategory" placeholder="中華料理" style="width: 250px"><br>
<label for="destinationAddress">到着住所（出発住所と同じ）</label><br>
<input type="text" id="destinationAddress" placeholder="小牧市●町■町目" style="width: 250px"  readonly><br>

<input type="button" value="検索" onclick="example();">



</div>



<%= link_to '一覧へ戻る', '/factors'%>


<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js"></script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDJzux1JhQNtBO-9TNu2fNp2hzzJOcyln8&libraries=places"></script>
<script type="text/javascript">

function tameshi(){
  var depatureAddress =document.getElementById('depatureAddress').value;
  var todo =document.getElementById('todo').value;
  var resutaurantCategory =document.getElementById('resutaurantCategory').value;
  var destinationAddress =document.getElementById('destinationAddress').value;

  content.push(depatureAddress,todo,resutaurantCategory,destinationAddress)
  console.log(content[0])
}
var contenter=[]
var content =[]
var placesList=[]
var totalname=[]
var totalduration=[]
var totaldistance=[]
var place1 =""
var place2 =""
var place3 =""
var place4 =""

//全体の状況を管理する関数、place4まで代入されたらcreateを実行する
function count1(){
  searchPlace("小牧市小松寺2丁目５２番地",function(results,status){
    place1 = results[0].geometry.location
    place4 = results[0].geometry.location
 
    searchNearby(place1,content[1],function(results,status){
      placesList = placesList.concat(results);
      for (var i = 0; i < placesList.length; i++){
        if(placesList[i].rating == undefined){
          placesList[i].rating = -1;
        }
      }

      placesList.sort(function(a,b){
        if(a.rating > b.rating) return -1;
        if(a.rating < b.rating) return 1;
        return 0;
      });

      var place2=results[0].geometry.location

      totalname.push(results[0].name)
      console.log(totalname[0])

      placesList = new Array();
      

      searchNearby(place2,content[2],function(results,status){

        placesList = placesList.concat(results);

        for (var i = 0; i < placesList.length; i++){
          if(placesList[i].rating == undefined){
            placesList[i].rating = -1;
          }
        }

        placesList.sort(function(a,b){
          if(a.rating > b.rating) return -1;
          if(a.rating < b.rating) return 1;
          return 0;
        });

        var place3=results[0].geometry.location
        totalname.push(results[0].name)
        console.log(totalname[1])
      
        placesList = new Array();


        getRoute(place1,place2,function(response,status){

          var distance=response.routes[0].legs[0].distance.text;
          var duration=response.routes[0].legs[0].duration.text;
          console.log(distance)
          console.log(duration)

          var distandereplaced=distance.replace(',','.');
          var distances = parseFloat(distandereplaced);
          totaldistance.push(distances);

          if(duration.includes('h')){
            var result= duration.search('h');
            var search =result-1;
            var hours =  duration.charAt(search);
            var min =parseInt(hours);
            var mints = min*60;
            var result2 = duration.search('min');
            var min2 = 0;
            min2 = parseInt(duration.substr(result+1,duration.length));
            mints += min2;
            totalduration.push(mints);
          }else{
            var mints = parseInt(duration);
            totalduration.push(mints);
          }
          console.log(totaldistance[0])
          console.log(totalduration[0])
      

          getRoute(place2,place3,function(response,status){
            var distance=response.routes[0].legs[0].distance.text;
            var duration=response.routes[0].legs[0].duration.text;
            console.log(distance)
            console.log(duration)

            var distandereplaced=distance.replace(',','.');
            var distances = parseFloat(distandereplaced);
            totaldistance.push(distances);

            if(duration.includes('h')){
              var result= duration.search('h');
              var search =result-1;
              var hours =  duration.charAt(search);
              var min =parseInt(hours);
              var mints = min*60;
              var result2 = duration.search('min');
              var min2 = 0;
              min2 = parseInt(duration.substr(result+1,duration.length));
              mints += min2;
              totalduration.push(mints);
            }else{
              var mints = parseInt(duration);
              totalduration.push(mints);
            }
            console.log(totaldistance[1])
            console.log(totalduration[1])


            getRoute(place3,place4,function(response,status){
              var distance=response.routes[0].legs[0].distance.text;
              var duration=response.routes[0].legs[0].duration.text;
              console.log(distance)
              console.log(duration)

              var distandereplaced=distance.replace(',','.');
              var distances = parseFloat(distandereplaced);
              totaldistance.push(distances);

              if(duration.includes('h')){
                var result= duration.search('h');
                var search =result-1;
                var hours =  duration.charAt(search);
                var min =parseInt(hours);
                var mints = min*60;
                var result2 = duration.search('min');
                var min2 = 0;
                min2 = parseInt(duration.substr(result+1,duration.length));
                mints += min2;
                totalduration.push(mints);
              }else{
                var mints = parseInt(duration);
                totalduration.push(mints);
                console.log(totaldistance[2])
                console.log(totalduration[2])
              }
            })
          })
        })
      })
    })
  })
}






//２箇所の時間と距離をだす関数
function getRoute(from,to,callback){
  var directionsService = new google.maps.DirectionsService();

  directionsService.route({
    origin:from,
    destination:to,
    travelMode:google.maps.DirectionsTravelMode.DRIVING,
  },callback
  );
}





//二番めの小牧市の住所を元に近くのお店を検索する関数
function searchNearby(latLng,keywordInput,callback){


  //document.getElementById("results").innerHTML = "Now Loading...";

  var map = new google.maps.Map(
    document.createElement("div")
  );

  var service = new google.maps.places.PlacesService(map);

  service.nearbySearch(
    {
      location:latLng,
      radius: 5000,
      keyword: keywordInput,
      
    },
    callback
  );
}





//始めの小牧市の住所を取得するための関数
function searchPlace(addressInput, callback){
var geocoder = new google.maps.Geocoder();
geocoder.geocode({address:addressInput}, callback);
}





$(function() {
  $("#depatureAddress").on("keyup", function(){
    var charNum = $(this).val();
    $("#destinationAddress").val(charNum );
  });
});


</script>